<?xml version="1.0" encoding="utf-8"?>
<abapGit version="v1.0.0" serializer="LCL_OBJECT_CLAS" serializer_version="v1.0.0">
 <asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">
  <asx:values>
   <VSEOCLASS>
    <CLSNAME>ZCL_LLM_00_FLOW_LAZY</CLSNAME>
    <LANGU>E</LANGU>
    <DESCRIPT>Flow of steps</DESCRIPT>
    <STATE>1</STATE>
    <CLSCCINCL>X</CLSCCINCL>
    <FIXPT>X</FIXPT>
    <UNICODE>X</UNICODE>
   </VSEOCLASS>
   <LINES>
    <TLINE>
     <TDFORMAT>U1</TDFORMAT>
     <TDLINE>ABAP Component Documentation: ZCL_LLM_00_FLOW_LAZY</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>1. Component Overview</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Type&lt;/&gt;: ABAP Class (&lt;U&gt;zcl_llm_00_flow_lazy&lt;/&gt;)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Technical Category&lt;/&gt;: Business Logic / Orchestration (Flow</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>Controller)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;System Role&lt;/&gt;: Core component in the $ZLLM_00 Lightweight LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>Module, orchestrating the execution of a sequence of LLM (Large</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>Language Model) processing steps.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>Location and Namespace</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Namespace&lt;/&gt;: Z (custom, customer namespace)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Package&lt;/&gt;: $ZLLM_00 (Lightweight LLM Module, temporary/analytical</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>focus)</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>Component Role in System Architecture</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_FLOW_LAZY&lt;/&gt; acts as a flow controller for a sequence of</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>LLM-related processing steps. It enables the construction, execution,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>and management of step-based flows, where each step typically</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>represents a discrete LLM operation (e.g., prompt processing, token</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>prediction, etc.). It is central to the orchestration of LLM workflows</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>in the ZLLM_00 module.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>2. Technical Analysis</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.1 Core Functionality</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_FLOW_LAZY&lt;/&gt; provides a flexible mechanism to define and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>execute a sequence (flow) of LLM processing steps. Its main</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>responsibilities include:</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Flow Construction&lt;/&gt;: Instantiates a flow from a list of patterns</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>(&lt;U&gt;PAT&lt;/&gt;), formulas, or directly from step objects.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Step Orchestration&lt;/&gt;: Manages the execution order, input/output</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>passing, and result collection for each step in the flow.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debugging Support&lt;/&gt;: Offers hooks for tracing and debugging the</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>flow execution.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Interface Implementation&lt;/&gt;: Implements &lt;U&gt;zif_llm_00_flow_lazy&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>and delegates step execution to &lt;U&gt;zif_llm_00_step_lazy&lt;/&gt;.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Key Operations</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;new_from_pat_list / new_from_formula_list / new&lt;/&gt;: Factory</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>methods to construct a flow from various sources (pattern list, formula</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>list, or explicit step list).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;exec / go&lt;/&gt;: Executes the flow, delegating to the step execution</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>logic.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;next&lt;/&gt;: Advances to the next step in the flow, passing along</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>intermediate results.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;collect&lt;/&gt;: Aggregates results from the executed steps.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;start&lt;/&gt;: Initiates the flow, chaining step execution.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debugging&lt;/&gt;: &lt;U&gt;_debug&lt;/&gt;, &lt;U&gt;_in&lt;/&gt;, &lt;U&gt;_out&lt;/&gt; methods for</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>tracing input/output during execution.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.2 Technical Architecture</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Interfaces</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Implements&lt;/&gt;: &lt;U&gt;zif_llm_00_flow_lazy&lt;/&gt; (main flow interface)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Delegates&lt;/&gt;: &lt;U&gt;zif_llm_00_step_lazy&lt;/&gt; (step execution interface)</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Dependencies</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Step Classes&lt;/&gt;: &lt;U&gt;zcl_llm_00_step_lazy&lt;/&gt; (for step</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>instantiation and execution)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Pattern/Formulas&lt;/&gt;: &lt;U&gt;zif_llm_00_pat_list&lt;/&gt;,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;zif_llm_00_formula_list&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;LLM Engine&lt;/&gt;: &lt;U&gt;zif_llm_00_llm_lazy&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Tracing&lt;/&gt;: &lt;U&gt;zif_llm_00_trace&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;JSON Utility&lt;/&gt;: &lt;U&gt;zcl_llm_00_json&lt;/&gt; (for debug output)</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Data Flow</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Input&lt;/&gt;: Receives input data (&lt;U&gt;mr_in&lt;/&gt;) and step result</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>objects.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Processing&lt;/&gt;: Sequentially executes each step, passing results as</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>input to the next.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Output&lt;/&gt;: Final result is available in &lt;U&gt;mr_out&lt;/&gt; or via</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;collect&lt;/&gt;.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debugging&lt;/&gt;: Optionally logs input/output at each step if</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>debugging is enabled.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Class Data</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;gv_debug&lt;/&gt;: Global debug flag (class-level)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;go_trace&lt;/&gt;: Global trace object (class-level)</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Instance Data</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;mo_pat_list / mo_form_list&lt;/&gt;: Pattern/formula lists</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;mo_llm&lt;/&gt;: LLM engine instance</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;mt_pat / mt_form / mt_step&lt;/&gt;: Step lists</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;mv_index / mv_len&lt;/&gt;: Step index and total count</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;mr_in / mr_ / mr_out&lt;/&gt;: Input, intermediate, and output data</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>references</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;mo_step&lt;/&gt;: Current step object</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;mo_step_result_in / mo_step_result&lt;/&gt;: Step result objects</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;mr_res / mv_res&lt;/&gt;: Result references/values</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.3 Implementation Details</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Design Patterns</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Factory Pattern&lt;/&gt;: Used in &lt;U&gt;new_from_pat_list&lt;/&gt;,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;new_from_formula_list&lt;/&gt;, and &lt;U&gt;new&lt;/&gt; for flexible instantiation.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Chain of Responsibility&lt;/&gt;: Steps are executed in sequence, each</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>passing its output to the next.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Strategy/Delegation&lt;/&gt;: Step execution is delegated to</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;zcl_llm_00_step_lazy&lt;/&gt; instances.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Algorithm Explanation</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Flow Construction&lt;/&gt;: Depending on the input (pattern list,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>formula list, or explicit steps), the constructor builds the internal</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>step list (&lt;U&gt;mt_step&lt;/&gt;) by instantiating step objects for each</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>pattern/formula.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Step Execution&lt;/&gt;: The &lt;U&gt;start&lt;/&gt; method loops through all steps,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>passing the result of each as input to the next. The &lt;U&gt;next&lt;/&gt; method</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>advances the flow by one step.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Result Collection&lt;/&gt;: The &lt;U&gt;collect&lt;/&gt; method aggregates the</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>results, caching them for repeated access.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debugging&lt;/&gt;: If debugging is enabled, input and output at each</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>step are serialized to JSON and sent to the trace object.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Error Handling and Logging</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Minimal explicit error handling&lt;/&gt;: Relies on ABAP runtime</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>exceptions for most error scenarios.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debugging/Tracing&lt;/&gt;: Controlled via &lt;U&gt;gv_debug&lt;/&gt; and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;go_trace&lt;/&gt;. If enabled, logs JSON representations of input/output.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Performance Considerations</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;In-memory processing&lt;/&gt;: All flow and step data are managed in</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>memory; no direct database operations.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debugging overhead&lt;/&gt;: Enabling debugging may impact performance</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>due to JSON serialization and trace calls.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Security Implications</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;No direct security checks&lt;/&gt;: Assumes caller has appropriate</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>authorization.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Sensitive data&lt;/&gt;: If input/output contains sensitive data, ensure</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>trace/debug output is secured.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>3. Business Context</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.1 Business Purpose</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_FLOW_LAZY&lt;/&gt; enables the orchestration of complex</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>LLM-driven workflows in SAP. It abstracts the execution of multiple LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>processing steps, allowing business logic to be defined as a sequence</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>of reusable, configurable steps (patterns or formulas).</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.2 Process Integration</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Code Analysis &amp;(and)&amp; AI Workflows&lt;/&gt;: Used in scenarios where</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>ABAP code or business objects are analyzed, transformed, or processed</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>using LLMs.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Batch or Analytical Processing&lt;/&gt;: Supports analytical or</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>experimental workflows, such as code intelligence, dependency mapping,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>or AI-driven code review.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Integration Points&lt;/&gt;: Invoked by higher-level orchestration</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>classes or directly by demo/report programs (see related components in</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>the flow diagram).</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.3 Operational Impact</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Central Orchestration&lt;/&gt;: Changes to this class affect all LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>flow-based processes in the ZLLM_00 module.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Extensibility&lt;/&gt;: New business scenarios can be supported by</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>defining new patterns/formulas and plugging them into flows.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>4. Support &amp;(and)&amp; Maintenance</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.1 Configuration</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Pattern/Formulas&lt;/&gt;: Managed via &lt;U&gt;zif_llm_00_pat_list&lt;/&gt; and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;zif_llm_00_formula_list&lt;/&gt;. Ensure these are correctly populated for</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>desired flows.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;LLM Engine&lt;/&gt;: Requires a configured instance of</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;zif_llm_00_llm_lazy&lt;/&gt;.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.2 Monitoring</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debugging/Tracing&lt;/&gt;: Enable via &lt;U&gt;_debug&lt;/&gt; method. Monitor</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>trace output for step-by-step execution details.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Performance&lt;/&gt;: Monitor memory usage for large flows or</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>high-volume processing.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.3 Common Issues</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Step List Construction&lt;/&gt;: Errors in pattern/formula lists may</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>result in missing or misconfigured steps.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Index Errors&lt;/&gt;: If &lt;U&gt;mv_index&lt;/&gt; exceeds &lt;U&gt;mv_len&lt;/&gt;, flow</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>execution may terminate early.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debugging Overhead&lt;/&gt;: Excessive debugging may impact performance;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>disable in production.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>5. Additional Information</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Author&lt;/&gt;: [Not specified]</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Last Updated&lt;/&gt;: [Not specified]</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Version&lt;/&gt;: [Not specified]</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>References and Related Components</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Step Execution&lt;/&gt;: &lt;U&gt;zcl_llm_00_step_lazy&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Pattern/Formulas&lt;/&gt;: &lt;U&gt;zif_llm_00_pat_list&lt;/&gt;,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;zif_llm_00_formula_list&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;LLM Engine&lt;/&gt;: &lt;U&gt;zif_llm_00_llm_lazy&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Tracing&lt;/&gt;: &lt;U&gt;zif_llm_00_trace&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;JSON Utility&lt;/&gt;: &lt;U&gt;zcl_llm_00_json&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Related Reports&lt;/&gt;: &lt;U&gt;R.ZLLM_00_FLOW_DEMO&lt;/&gt;,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;R.ZLLM_00_REPL&lt;/&gt;, etc.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>Example Usage</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>DATA(lo_flow) = zcl_llm_00_flow_lazy=&gt;new_from_pat_list(</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  io_pat_list = &lt;pattern_list&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  io_llm      = &lt;llm_instance&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  iv_model    = &apos;gpt-3.5&apos;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  iv_system   = &apos;DEV&apos;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>lo_flow-&gt;exec( ir_ = &lt;input_data&gt; ).</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>Summary</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_FLOW_LAZY&lt;/&gt; is a central orchestration class in the</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>ZLLM_00 module, enabling flexible, step-based LLM workflows in SAP. It</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>abstracts the complexity of chaining LLM operations, supports</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>extensibility via patterns/formulas, and provides debugging/tracing for</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>maintainability. Proper configuration and monitoring are essential for</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>robust operation.</TDLINE>
    </TLINE>
    <TLINE/>
   </LINES>
   <DESCRIPTIONS_SUB>
    <SEOSUBCOTX>
     <CMPNAME>NEW</CMPNAME>
     <SCONAME>RO_</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Step: LLM( PT(IN) ) -&gt; OUT</DESCRIPT>
    </SEOSUBCOTX>
   </DESCRIPTIONS_SUB>
  </asx:values>
 </asx:abap>
</abapGit>
