<?xml version="1.0" encoding="utf-8"?>
<abapGit version="v1.0.0" serializer="LCL_OBJECT_CLAS" serializer_version="v1.0.0">
 <asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">
  <asx:values>
   <VSEOCLASS>
    <CLSNAME>ZCL_LLM_00_STEP_LAZY_PARALLEL</CLSNAME>
    <LANGU>E</LANGU>
    <DESCRIPT>Step</DESCRIPT>
    <STATE>1</STATE>
    <CLSCCINCL>X</CLSCCINCL>
    <FIXPT>X</FIXPT>
    <UNICODE>X</UNICODE>
   </VSEOCLASS>
   <LINES>
    <TLINE>
     <TDFORMAT>U1</TDFORMAT>
     <TDLINE>ABAP Component Documentation: ZCL_LLM_00_STEP_LAZY_PARALLEL</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>1. Component Overview</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Type&lt;/&gt;: ABAP Class (&lt;U&gt;zcl_llm_00_step_lazy_parallel&lt;/&gt;)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Namespace/Location&lt;/&gt;: &lt;U&gt;$ZLLM_00&lt;/&gt; package (Lightweight LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>Module)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Technical Category&lt;/&gt;: Business logic / AI orchestration / LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>(Large Language Model) step execution</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;System Role&lt;/&gt;: Implements a parallelizable &quot;step&quot; in a modular,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>graph-based LLM orchestration framework for SAP ABAP. Used for</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>executing LLM prompts/patterns in parallel over collections (tables) or</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>scalars, supporting advanced AI-driven workflows.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>2. Technical Analysis</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.1 Core Functionality</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_STEP_LAZY_PARALLEL&lt;/&gt; is a final, public ABAP class</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>implementing the &lt;U&gt;ZIF_LLM_00_STEP_LAZY&lt;/&gt; interface. It represents a</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&quot;step&quot; in an LLM workflow that can process input data (either a single</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>value or a table of values) using one or more LLM prompt patterns</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>(system/user), and can execute these steps in parallel for table inputs.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Accepts both &quot;system&quot; and &quot;user&quot; prompt patterns</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>(&lt;U&gt;ZIF_LLM_00_PAT&lt;/&gt;).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Supports both scalar and table input, automatically dispatching</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>parallel LLM calls for each table row.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Can enforce or detect JSON-formatted responses from the LLM.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Integrates with the LLM abstraction (&lt;U&gt;ZIF_LLM_00_LLM_LAZY&lt;/&gt;) for</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>actual model invocation.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Provides debugging and tracing hooks for input/output at each step.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Returns results as &lt;U&gt;ZIF_LLM_00_STEP_RESULT&lt;/&gt; or as a collection</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>(&lt;U&gt;ZCL_LLM_00_FLOW_RESULT&lt;/&gt;) for table processing.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.2 Technical Architecture</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Interfaces</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Implements:&lt;/&gt; &lt;U&gt;ZIF_LLM_00_STEP_LAZY&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Provides methods: &lt;U&gt;exec&lt;/&gt;, &lt;U&gt;start&lt;/&gt;, &lt;U&gt;collect&lt;/&gt; (aliased as</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;exec&lt;/&gt;, &lt;U&gt;start&lt;/&gt;, &lt;U&gt;yield&lt;/&gt;).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Related Types:&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZIF_LLM_00_PAT&lt;/&gt; (Prompt pattern)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZIF_LLM_00_LLM_LAZY&lt;/&gt; (LLM abstraction)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZIF_LLM_00_STEP_RESULT&lt;/&gt; (Step result)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZIF_LLM_00_TRACE&lt;/&gt; (Tracing/debugging)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZCL_LLM_00_CHAT_IN&lt;/&gt;, &lt;U&gt;ZCL_LLM_00_KV&lt;/&gt;, &lt;U&gt;ZCL_LLM_00_JSON&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>(for message and JSON handling)</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Dependencies</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Direct:&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZCL_LLM_00_FLOW_RESULT&lt;/&gt; (for aggregating results)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZCL_LLM_00_STEP_RESULT&lt;/&gt; (for individual step results)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZCL_LLM_00_CHAT_IN&lt;/&gt; (for LLM input message construction)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZCL_LLM_00_JSON&lt;/&gt; (for JSON serialization)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZCL_LLM_00_KV&lt;/&gt; (for response format specification)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZIF_LLM_00_TRACE&lt;/&gt; (for debug tracing)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Indirect/Related:&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  LLM configuration and caching via related classes in &lt;U&gt;$ZLLM_00&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Data model tables for caching, analytics, and documentation (see</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>[RELATED] section)</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Data Flow</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Input:&lt;/&gt; Reference to data (scalar or table), prompt patterns,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>LLM instance, optional model/system parameters.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Processing:&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  For scalar: Applies patterns, builds LLM message, optionally enforces</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>JSON, invokes LLM, wraps result.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  For table: Loops over each row, processes as scalar, aggregates</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>results.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Output:&lt;/&gt; Step result(s) as &lt;U&gt;ZIF_LLM_00_STEP_RESULT&lt;/&gt; or</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_FLOW_RESULT&lt;/&gt;.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Error Handling &amp;(and)&amp; Logging</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Raises custom exception &lt;U&gt;zcx_s&lt;/&gt; for errors in</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;start_for_table&lt;/&gt; and &lt;U&gt;start_for_scalar&lt;/&gt;.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Debugging/tracing via &lt;U&gt;_in&lt;/&gt; and &lt;U&gt;_out&lt;/&gt; methods, controlled by</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>class-data &lt;U&gt;gv_debug&lt;/&gt; and &lt;U&gt;go_trace&lt;/&gt;.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Performance Considerations</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Designed for parallel processing of table inputs (each row processed</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>independently).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Efficient for batch LLM operations, but actual parallelism depends on</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>LLM backend and orchestration.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Security Implications</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Handles dynamic prompt and data construction; ensure input</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>sanitization if user-provided data is used.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  LLM invocation may involve external API calls; secure</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>credentials/configuration required.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Debugging/tracing should be disabled in production to avoid leaking</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>sensitive data.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.3 Implementation Details</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Design Patterns</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Factory Pattern:&lt;/&gt; Static methods &lt;U&gt;new_from_pat&lt;/&gt; and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;new_from_formula&lt;/&gt; for controlled instantiation.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Strategy/Template:&lt;/&gt; Uses injected prompt patterns and LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>instance for flexible behavior.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Polymorphism:&lt;/&gt; Implements interface for interchangeable use in</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>workflow orchestration.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Key Algorithms</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Dynamic Type Handling:&lt;/&gt; Uses &lt;U&gt;cl_abap_typedescr&lt;/&gt; to</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>determine if input is scalar, reference, or table, and dispatches</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>accordingly.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Prompt Construction:&lt;/&gt; Applies system/user patterns to input,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>builds message list, optionally adds JSON enforcement message.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Parallel Table Processing:&lt;/&gt; Loops over table input, processes</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>each row as a scalar step, aggregates results.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Example: Scalar Processing Logic</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>IF mo_pat_sys IS BOUND.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  lv_sys = mo_pat_sys-&gt;apply( ir_ ).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>ELSE.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  lv_sys = mv_system.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>ENDIF.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>lv_usr = mo_pat_usr-&gt;apply( ir_ ).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>...</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>IF lv_sys IS NOT INITIAL.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  APPEND VALUE #( role = &apos;system&apos; content = lv_sys ) TO lt_msg.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>ENDIF.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>...</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>APPEND VALUE #( role = &apos;user&apos; content = lv_usr ) TO lt_msg.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>...</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>lo_in = zcl_llm_00_chat_in=&gt;new( ls_in ).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>ro_ ?= zcl_llm_00_step_result=&gt;new(</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  iv_k    = zcl_llm_00_json=&gt;to_json( ls_in-messages )</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  io_json = lo_in</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  io_llm  = mo_llm</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  iv_json_expected = lv_json_expected</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>).</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Debugging/Tracing</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Controlled by static attributes (&lt;U&gt;gv_debug&lt;/&gt;, &lt;U&gt;go_trace&lt;/&gt;).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;U&gt;_in&lt;/&gt; and &lt;U&gt;_out&lt;/&gt; methods serialize input/output to JSON and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>pass to trace object if enabled.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>3. Business Context</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.1 Business Purpose</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Automated code review or documentation generation</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Batch processing of business texts, emails, or documents</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  AI-driven data enrichment or classification</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.2 Process Integration</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Used as a step in larger LLM-driven workflows (see &lt;U&gt;$ZLLM_00&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>orchestration).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Integrates with prompt pattern management, LLM configuration, and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>result aggregation.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Can be invoked by higher-level process controllers or directly by</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>business applications needing AI/LLM capabilities.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.3 Operational Impact</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Enables scalable, efficient LLM processing for business and technical</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>data.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Reduces manual effort for repetitive text processing or code analysis</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>tasks.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Supports maintainability and extensibility via pattern injection and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>modular design.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>4. Support &amp;(and)&amp; Maintenance</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.1 Configuration</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Requires configuration of LLM backend (&lt;U&gt;ZIF_LLM_00_LLM_LAZY&lt;/&gt;),</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>model name, and prompt patterns.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Debugging/tracing can be enabled/disabled via &lt;U&gt;_debug&lt;/&gt; method.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.2 Monitoring</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Monitor LLM API usage and performance, especially for high-volume</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>table processing.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Trace logs (if enabled) can be used for auditing and troubleshooting.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.3 Common Issues</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Input Type Errors:&lt;/&gt; If input data is not compatible (e.g., not a</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>table or scalar), processing may fail.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;LLM API Errors:&lt;/&gt; Downstream errors from LLM backend (timeouts,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>quota exceeded, etc.) should be handled at orchestration level.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debugging Overhead:&lt;/&gt; Tracing should be disabled in production to</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>avoid performance and security issues.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>5. Additional Information</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Author&lt;/&gt;: Not specified</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Last Updated&lt;/&gt;: Not specified</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Version&lt;/&gt;: Not specified</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>Related Components and Data Model</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Prompt Patterns:&lt;/&gt; &lt;U&gt;ZIF_LLM_00_PAT&lt;/&gt;, &lt;U&gt;ZCL_LLM_00_PAT&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;LLM Abstraction:&lt;/&gt; &lt;U&gt;ZIF_LLM_00_LLM_LAZY&lt;/&gt;,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_LLM_LAZY&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Result Aggregation:&lt;/&gt; &lt;U&gt;ZCL_LLM_00_FLOW_RESULT&lt;/&gt;,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_STEP_RESULT&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Tracing:&lt;/&gt; &lt;U&gt;ZIF_LLM_00_TRACE&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Data Model:&lt;/&gt; See &lt;U&gt;$ZLLM_00&lt;/&gt; tables for caching, analytics,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>and documentation (see [RELATED] section above)</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>Summary Table</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>K1</TDFORMAT>
     <TDLINE>Method,,Purpose</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;new_from_pat&lt;/&gt;,,Factory: Create instance from prompt patterns and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>,,LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;new_from_formula&lt;/&gt;,,Factory: Create instance from formula object</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>,,and LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;start_for_scalar&lt;/&gt;,,Process a single data item (scalar) with LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>,,and prompt patterns</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;start_for_table&lt;/&gt;,,Process a table of data items in parallel,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>,,aggregating results</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;detect_json&lt;/&gt;,,Detect if JSON response is expected based on input</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>,,and configuration</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;exec&lt;/&gt;, &lt;U&gt;start&lt;/&gt;, &lt;U&gt;yield&lt;/&gt;,,Interface methods for step</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>,,execution and result collection</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;_debug&lt;/&gt;,,Enable/disable debugging and set trace object</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;_in&lt;/&gt;, &lt;U&gt;_out&lt;/&gt;,,Trace input/output for debugging</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>LA</TDFORMAT>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>Security Considerations</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Ensure that only authorized users can configure and execute LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>steps, especially if external APIs are involved.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Sensitive data should not be logged or traced in production</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>environments.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Validate and sanitize all input data to prevent prompt injection or</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>data leakage.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>Example Usage Scenario</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  1. Configure system/user prompt patterns for classification.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  2. Instantiate &lt;U&gt;ZCL_LLM_00_STEP_LAZY_PARALLEL&lt;/&gt; using</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;new_from_pat&lt;/&gt;.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  3. Call &lt;U&gt;start_for_table&lt;/&gt; with your email table.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  4. Collect and process the results from the returned</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_FLOW_RESULT&lt;/&gt;.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>References</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  ZIF_LLM_00_STEP_LAZY Interface (see related components)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  ZCL_LLM_00_FLOW_RESULT (for result aggregation)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  ZCL_LLM_00_LLM_LAZY (for LLM backend integration)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  ZCL_LLM_00_PAT (for prompt pattern management)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  ZCL_LLM_00_JSON (for JSON serialization)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  ZIF_LLM_00_TRACE (for debugging/tracing)</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>&lt;B&gt;Note:&lt;/&gt; This class is part of a larger, modular LLM orchestration</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>framework in SAP ABAP, designed for extensibility, maintainability, and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>advanced AI-driven business logic. For full context, review the</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;$ZLLM_00&lt;/&gt; package and related orchestration components.</TDLINE>
    </TLINE>
    <TLINE/>
   </LINES>
   <DESCRIPTIONS_SUB>
    <SEOSUBCOTX>
     <CMPNAME>DETECT_JSON</CMPNAME>
     <SCONAME>RV_</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Boolean Variable (X=True, Space=False)</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>START_FOR_SCALAR</CMPNAME>
     <SCONAME>RO_</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Step: LLM( PT(IN) ) -&gt; OUT</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>START_FOR_TABLE</CMPNAME>
     <SCONAME>RO_</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Step: LLM( PT(IN) ) -&gt; OUT</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>_DEBUG</CMPNAME>
     <SCONAME>IV_</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Boolean Variable (X=True, Space=False)</DESCRIPT>
    </SEOSUBCOTX>
   </DESCRIPTIONS_SUB>
  </asx:values>
 </asx:abap>
</abapGit>
