<?xml version="1.0" encoding="utf-8"?>
<abapGit version="v1.0.0" serializer="LCL_OBJECT_CLAS" serializer_version="v1.0.0">
 <asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">
  <asx:values>
   <VSEOCLASS>
    <CLSNAME>ZCL_LLM_00_STEP_RESULT</CLSNAME>
    <LANGU>E</LANGU>
    <DESCRIPT>Step Result</DESCRIPT>
    <STATE>1</STATE>
    <CLSCCINCL>X</CLSCCINCL>
    <FIXPT>X</FIXPT>
    <UNICODE>X</UNICODE>
    <WITH_UNIT_TESTS>X</WITH_UNIT_TESTS>
   </VSEOCLASS>
   <LINES>
    <TLINE>
     <TDFORMAT>U1</TDFORMAT>
     <TDLINE>ABAP Component Documentation: ZCL_LLM_00_STEP_RESULT</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>1. Component Overview</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Type&lt;/&gt;: ABAP Class (&lt;U&gt;ZCL_LLM_00_STEP_RESULT&lt;/&gt;)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Technical Category&lt;/&gt;: LLM (Large Language Model) Step Result</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>Handler / Data Transformation Utility</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;System Role&lt;/&gt;: Core utility class in the $ZLLM_00 package,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>responsible for encapsulating and transforming the results of LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>(AI/ML) processing steps within a modular, graph-based analytical</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>subsystem.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>2. Technical Analysis</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.1 Core Functionality</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_STEP_RESULT&lt;/&gt; is a utility class designed to</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>encapsulate, transform, and expose the results of a single processing</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>step in an LLM-driven workflow. It acts as a bridge between the LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>execution layer and downstream consumers, providing a uniform interface</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>for accessing results in various formats (string, JSON, raw, embedded,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>etc.).</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Constructing step result objects from various sources (HTTP, string,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>table, structure, LLM response).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Converting and exposing results in different representations (string,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>JSON, raw, embedded).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Integrating with LLM execution and payload adapter interfaces.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Handling expected result formats (JSON vs. plain text).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Supporting debugging and error handling.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.2 Technical Architecture</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Interfaces</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;ZIF_LLM_00_STRING&lt;/&gt;: Provides methods for string conversion and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>token prediction.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;ZIF_LLM_00_STEP_RESULT&lt;/&gt;: Defines the contract for step result</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>collection, embedding, raw access, and JSON format checking.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Key Methods</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;NEW / NEW_FROM_HTTP / NEW_FROM_STRING / NEW_FROM_TABLE /</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>NEW_FROM_STRUCTURE&lt;/&gt;: Factory methods for creating result objects from</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>different sources.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;zif_llm_00_step_result~collect&lt;/&gt;: Main method to collect and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>transform the result, handling JSON flattening and structure unpacking</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>as needed.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;zif_llm_00_step_result~collect_embed&lt;/&gt;: Converts the result into</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>an embedding output object.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;zif_llm_00_step_result~collect_raw&lt;/&gt;: Returns the raw JSON result</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>as a string.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;zif_llm_00_string~predict_tokens&lt;/&gt;: Predicts token count for the</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>result string.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;zif_llm_00_string~to_string&lt;/&gt;: Converts the result to a string,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>with error handling and fallback.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;zif_llm_00_step_result~is_json&lt;/&gt;: Indicates if the result is</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>expected to be JSON.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Dependencies</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;ZIF_LLM_00_LLM_LAZY&lt;/&gt;: LLM execution interface (for querying and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>receiving results).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;ZIF_LLM_00_JSON&lt;/&gt;: JSON utility interface (for parsing,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>flattening, and structure detection).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;ZCL_LLM_00_EMBED_OUT&lt;/&gt;: For embedding output conversion.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;ZCL_LLM_00_STRING&lt;/&gt;: For string conversion and token prediction.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;ZCL_LLM_00_JSON&lt;/&gt;: For JSON manipulation and flattening.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;CL_DEMO_OUTPUT&lt;/&gt;: For debug output.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;ZCX_S&lt;/&gt;: Custom exception class for error handling.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U4</TDFORMAT>
     <TDLINE>Data Flow</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  1. &lt;B&gt;Construction&lt;/&gt;: The class is instantiated via one of the</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>factory methods, optionally with LLM, JSON, HTTP, or direct data.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  2. &lt;B&gt;Result Collection&lt;/&gt;: The &lt;U&gt;collect&lt;/&gt; method retrieves and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>transforms the result, handling JSON flattening and structure unpacking</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>if required.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  3. &lt;B&gt;Result Exposure&lt;/&gt;: The result can be accessed as a string, raw</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>JSON, or embedding, depending on the interface method called.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  4. &lt;B&gt;Debugging&lt;/&gt;: Optional debug output is available if enabled.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.3 Implementation Details</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Design Pattern&lt;/&gt;: Factory pattern for object creation; Adapter</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>pattern for payload handling.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Result Caching&lt;/&gt;: Internal caching of result data (&lt;U&gt;mr_res&lt;/&gt;,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;mv_res&lt;/&gt;) to avoid redundant computation.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;JSON Handling&lt;/&gt;: If JSON is expected, the result is parsed,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>flattened, and structure-unpacked as needed.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Error Handling&lt;/&gt;: Uses custom exception &lt;U&gt;ZCX_S&lt;/&gt;; errors are</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>displayed via &lt;U&gt;cl_demo_output&lt;/&gt; and logged via &lt;U&gt;zcl_cpu=&gt;ok&lt;/&gt;.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debugging&lt;/&gt;: Controlled by static class-data &lt;U&gt;mv_debug&lt;/&gt;,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>which can be toggled via the &lt;U&gt;_DEBUG&lt;/&gt; method.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Token Prediction&lt;/&gt;: Integrates with the string utility to predict</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>token count for LLM cost estimation or validation.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>3. Business Context</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.1 Business Purpose</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>This class is central to the LLM (Large Language Model) orchestration</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>framework within SAP, enabling the standardized handling of step</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>results in AI-driven workflows. It abstracts the complexity of result</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>formats, making it easier for downstream processes to consume LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>outputs regardless of their origin or structure.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.2 Process Integration</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Workflow Orchestration&lt;/&gt;: Used in step-based LLM workflows, where</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>each step may produce results in different formats.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Result Normalization&lt;/&gt;: Ensures that results from LLMs, HTTP</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>calls, or direct data are normalized and accessible in a consistent way.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Token Management&lt;/&gt;: Supports token counting for cost control and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>prompt engineering.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Embedding Generation&lt;/&gt;: Facilitates conversion of results into</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>embeddings for downstream ML tasks.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.3 Operational Impact</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Reliability&lt;/&gt;: By standardizing result handling, reduces errors</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>and inconsistencies in LLM-driven processes.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Extensibility&lt;/&gt;: New result types or formats can be integrated</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>with minimal changes.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debugging&lt;/&gt;: Built-in debug support aids in rapid troubleshooting</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>and development.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>4. Support &amp;(and)&amp; Maintenance</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.1 Configuration</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debug Mode&lt;/&gt;: Can be toggled via the &lt;U&gt;_DEBUG&lt;/&gt; class method.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;JSON Expectation&lt;/&gt;: Controlled via the &lt;U&gt;iv_json_expected&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>parameter in constructors and factory methods.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.2 Monitoring</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Error Logging&lt;/&gt;: Errors are displayed and logged via standard SAP</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>mechanisms.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debug Output&lt;/&gt;: When enabled, intermediate results are displayed</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>for inspection.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.3 Common Issues</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Incorrect Format Handling&lt;/&gt;: If &lt;U&gt;iv_json_expected&lt;/&gt; is set</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>incorrectly, results may not be parsed as intended.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Missing Dependencies&lt;/&gt;: Requires correct implementation of LLM,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>JSON, and embedding interfaces.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Error Propagation&lt;/&gt;: Exceptions of type &lt;U&gt;ZCX_S&lt;/&gt; must be</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>handled by callers.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>5. Additional Information</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Author&lt;/&gt;: Not specified</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Last Updated&lt;/&gt;: Not specified</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Version&lt;/&gt;: Not specified</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>&lt;B&gt;Related Components and Integration&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;LLM Orchestration&lt;/&gt;: Works closely with</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_STEP_LAZY&lt;/&gt;, &lt;U&gt;ZCL_LLM_00_FLOW_LAZY&lt;/&gt;, and other</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>step/flow classes.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Data Model&lt;/&gt;: Part of the $ZLLM_00 analytical subsystem, which</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>uses a graph-based data model for code analysis and AI-driven workflows.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Payload Adapters&lt;/&gt;: Integrates with payload adapter classes for</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>flexible input/output handling.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Embedding and Tokenization&lt;/&gt;: Supports downstream ML tasks via</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>embedding and token prediction utilities.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>&lt;B&gt;Summary Table&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>K1</TDFORMAT>
     <TDLINE>Method Name,,Purpose</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>NEW,,Factory: Create from LLM, JSON, key</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>NEW_FROM_HTTP,,Factory: Create from HTTP client</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>NEW_FROM_STRING,,Factory: Create from string</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>NEW_FROM_TABLE,,Factory: Create from internal table</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>NEW_FROM_STRUCTURE,,Factory: Create from structure</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>zif_llm_00_step_result~collect,,Collects and transforms the result</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>,,(main logic)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>zif_llm_00_step_result~collect_embed,,Converts result to embedding</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>,,output</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>zif_llm_00_step_result~collect_raw,,Returns raw JSON result</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>zif_llm_00_string~predict_tokens,,Predicts token count for result string</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>zif_llm_00_string~to_string,,Converts result to string</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>zif_llm_00_step_result~is_json,,Indicates if result is expected to be</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>,,JSON</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>_DEBUG,,Enables/disables debug output</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>LA</TDFORMAT>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>&lt;B&gt;Security Considerations&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Data Exposure&lt;/&gt;: Ensure sensitive LLM outputs are handled</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>according to data privacy requirements.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Error Handling&lt;/&gt;: Exceptions should not leak sensitive</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>information in production environments.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Debug Output&lt;/&gt;: Debug mode should be disabled in production to</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>avoid unintentional data exposure.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>&lt;B&gt;References&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Related Classes&lt;/&gt;: &lt;U&gt;ZCL_LLM_00_STEP_LAZY&lt;/&gt;,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_FLOW_LAZY&lt;/&gt;, &lt;U&gt;ZCL_LLM_00_STRING&lt;/&gt;,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_JSON&lt;/&gt;, &lt;U&gt;ZCL_LLM_00_EMBED_OUT&lt;/&gt;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Data Model&lt;/&gt;: See $ZLLM_00 package documentation for graph-based</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>data structures and analytics tables.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>&lt;B&gt;In summary:&lt;/&gt;   &lt;U&gt;ZCL_LLM_00_STEP_RESULT&lt;/&gt; is a foundational</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>utility class in the SAP LLM orchestration framework, providing robust,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>extensible, and standardized handling of step results across diverse</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>input sources and formats. It is essential for reliable, maintainable,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>and scalable AI/ML process integration within SAP environments.</TDLINE>
    </TLINE>
    <TLINE/>
   </LINES>
   <DESCRIPTIONS>
    <SEOCOMPOTX>
     <CMPNAME>MV_DEBUG</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Boolean Variable (X=True, Space=False)</DESCRIPT>
    </SEOCOMPOTX>
   </DESCRIPTIONS>
   <DESCRIPTIONS_SUB>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>IV_K</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>key for cache</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>IV_V</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>result if known</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>_DEBUG</CMPNAME>
     <SCONAME>IV_</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Boolean Variable (X=True, Space=False)</DESCRIPT>
    </SEOSUBCOTX>
   </DESCRIPTIONS_SUB>
  </asx:values>
 </asx:abap>
</abapGit>
