<?xml version="1.0" encoding="utf-8"?>
<abapGit version="v1.0.0" serializer="LCL_OBJECT_CLAS" serializer_version="v1.0.0">
 <asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">
  <asx:values>
   <VSEOCLASS>
    <CLSNAME>ZCL_LLM_00_REASONING_OUT</CLSNAME>
    <LANGU>E</LANGU>
    <DESCRIPT>Describe, and Call FM from OpenAI</DESCRIPT>
    <STATE>1</STATE>
    <CLSCCINCL>X</CLSCCINCL>
    <FIXPT>X</FIXPT>
    <UNICODE>X</UNICODE>
    <WITH_UNIT_TESTS>X</WITH_UNIT_TESTS>
   </VSEOCLASS>
   <LINES>
    <TLINE>
     <TDFORMAT>U1</TDFORMAT>
     <TDLINE>ABAP Component Documentation: ZCL_LLM_00_REASONING_OUT</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>1. Component Overview</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Type&lt;/&gt;: ABAP Class (&lt;U&gt;zcl_llm_00_reasoning_out&lt;/&gt;)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Technical Category&lt;/&gt;: LLM (Large Language Model) Reasoning Output</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>Handler / Data Transfer Object (DTO)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;System Role&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Part of the $ZLLM_00 package, which implements a lightweight,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>graph-based LLM module for SAP.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  This class encapsulates and exposes the output of a reasoning</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>(inference) operation, typically from an LLM such as OpenAI, in a</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>structured and SAP-friendly way.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  It acts as a bridge between JSON-based LLM responses and ABAP</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>consumers, providing type-safe accessors and error handling.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>2. Technical Analysis</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.1 Core Functionality</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_REASONING_OUT&lt;/&gt; is a final, private-constructible class</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>that represents the output of a reasoning (inference) operation from an</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>LLM. Its main responsibilities are:</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Deserialization&lt;/&gt;: Converts JSON responses from LLM APIs into</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>ABAP structures.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Data Encapsulation&lt;/&gt;: Stores the reasoning output in a structured</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>format (&lt;U&gt;ts_reasoning_out&lt;/&gt;), exposing only safe, type-checked</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>accessors.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Accessors&lt;/&gt;: Provides methods to retrieve the main message, error</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>details, usage statistics, reasoning effort, and completion status.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Validation&lt;/&gt;: Ensures that the deserialized data contains</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>expected message output or error information, raising exceptions if not.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Serialization&lt;/&gt;: Implements a &lt;U&gt;to_json&lt;/&gt; method to convert the</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>internal structure back to JSON if needed.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.2 Technical Architecture</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Interfaces&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;zif_llm_00_types&lt;/&gt;: Provides type definitions, especially</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;ts_reasoning_out&lt;/&gt; and &lt;U&gt;ts_reasoning_usage&lt;/&gt;.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;zif_llm_00_json&lt;/&gt;: Provides JSON serialization/deserialization</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>contract.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Dependencies&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;zcl_llm_00_json&lt;/&gt;: Used for JSON parsing and serialization.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;zcx_s&lt;/&gt;: Custom exception class for error signaling.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ts_reasoning_out&lt;/&gt;: Structure representing the reasoning output</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>(fields include status, output, error, usage, etc.).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Data Flow&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Input: JSON string or ABAP structure representing LLM output.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Output: ABAP object with accessor methods for message, error, usage,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>etc.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Error handling: Raises &lt;U&gt;zcx_s&lt;/&gt; if output is invalid or missing.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.3 Implementation Details</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Construction&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Private constructor, only instantiable via static factory methods</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>(&lt;U&gt;new&lt;/&gt;, &lt;U&gt;new_from_json&lt;/&gt;).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;new_from_json&lt;/&gt; parses a JSON string into the internal structure,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>validates presence of message or error, and raises an exception if</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>neither is found.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Accessors&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;get_&lt;/&gt;: Returns the full internal structure.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;get_reply&lt;/&gt;: Returns the first message text from the output array.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;get_reasoning_effort&lt;/&gt;: Returns the reasoning effort metric.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;get_usage&lt;/&gt;: Returns usage statistics (e.g., token counts).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;get_reasoning_tokens&lt;/&gt;: Returns the number of tokens used for</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>reasoning.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;is_completed&lt;/&gt;: Returns &lt;U&gt;abap_true&lt;/&gt; if status is &apos;completed&apos;.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;has_error&lt;/&gt;/&lt;U&gt;get_error&lt;/&gt;: Returns error presence and details.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Serialization&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;to_json&lt;/&gt;: Converts the internal structure back to JSON.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Error Handling&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  If the output does not contain a message or error, raises a warning</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>and throws &lt;U&gt;zcx_s&lt;/&gt;.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Performance&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Lightweight, no database operations; all logic is in-memory.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Security&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  No direct security logic, but as a DTO, it should not expose</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>sensitive data unless present in the LLM output.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>3. Business Context</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.1 Business Purpose</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Objective&lt;/&gt;: To provide a robust, type-safe, and SAP-native way</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>to handle and interpret the output of LLM-based reasoning operations</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>(e.g., code analysis, text generation, business logic suggestions).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Significance&lt;/&gt;: Enables SAP systems to integrate with modern</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>AI/LLM services, making their outputs consumable by ABAP programs and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>workflows.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.2 Process Integration</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Typical Usage&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Called after an LLM API call (e.g., OpenAI) to parse and validate the</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>response.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Used in business processes that require AI-driven reasoning, such as</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>code review, documentation generation, or automated decision support.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Integration Points&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Consumed by higher-level classes or reports that orchestrate LLM</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>interactions (see related classes in $ZLLM_00).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  May be used in UI or background processes that need to display or</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>process LLM results.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.3 Operational Impact</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Business Operations&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Reduces risk of runtime errors by validating LLM output before</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>further processing.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Standardizes access to LLM output, making it easier to build</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>AI-driven features in SAP.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Facilitates error handling and logging for LLM-based processes.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>4. Support &amp;(and)&amp; Maintenance</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.1 Configuration</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;No direct configuration&lt;/&gt;: The class itself does not require</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>configuration, but depends on the structure of LLM output and the</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>correct setup of LLM API integration.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.2 Monitoring</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Key Points&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Monitor for exceptions raised by &lt;U&gt;new_from_json&lt;/&gt; (indicates</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>unexpected or malformed LLM output).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Track usage statistics (tokens, effort) for cost and performance</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>management.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.3 Common Issues</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Malformed LLM Output&lt;/&gt;: If the LLM response does not contain a</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>message or error, the class will raise an exception. Ensure upstream</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>LLM calls are correctly formed and responses are as expected.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Structure Mismatches&lt;/&gt;: Changes in the LLM API response format</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>may require updates to the &lt;U&gt;ts_reasoning_out&lt;/&gt; structure and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>accessor logic.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Error Propagation&lt;/&gt;: Consumers should handle exceptions from this</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>class to avoid process interruptions.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>5. Additional Information</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Author&lt;/&gt;: Not specified</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Last Updated&lt;/&gt;: Not specified</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Version&lt;/&gt;: Not specified</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>Related Components</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Data Model&lt;/&gt;: See ZLLM_00* tables for graph-based LLM data</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>storage and analytics.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Related Classes&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;zcl_llm_00_json&lt;/&gt; (JSON parsing/serialization)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;zif_llm_00_types&lt;/&gt; (type definitions)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;zcx_s&lt;/&gt; (exception handling)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Integration&lt;/&gt;: Used by LLM orchestration classes and demo reports</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>(see $ZLLM_00 package).</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>Example Usage</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>DATA(lo_reasoning_out) = zcl_llm_00_reasoning_out=&gt;new_from_json( iv_ =</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>lv_json ).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>IF lo_reasoning_out-&gt;has_error( ) = abap_true.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  WRITE: / &apos;Error:&apos;, lo_reasoning_out-&gt;get_error( ).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>ELSE.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  WRITE: / &apos;Reply:&apos;, lo_reasoning_out-&gt;get_reply( ).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>ENDIF.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>Summary Table</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>K1</TDFORMAT>
     <TDLINE>Method,,Purpose</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;new&lt;/&gt;,,Create from ABAP structure</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;new_from_json&lt;/&gt;,,Create from JSON string, with validation</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;get_&lt;/&gt;,,Get full output structure</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;get_reply&lt;/&gt;,,Get main message text</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;get_reasoning_effort&lt;/&gt;,,Get reasoning effort metric</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;get_usage&lt;/&gt;,,Get usage statistics</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;get_reasoning_tokens&lt;/&gt;,,Get number of reasoning tokens used</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;is_completed&lt;/&gt;,,Check if reasoning is completed</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;has_error&lt;/&gt;,,Check if an error is present</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;get_error&lt;/&gt;,,Get error message</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>T1</TDFORMAT>
     <TDLINE>&lt;U&gt;to_json&lt;/&gt;,,Serialize output to JSON</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>LA</TDFORMAT>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>Security Considerations</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Ensure that LLM outputs do not contain sensitive or confidential</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>information unless intended.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Handle exceptions gracefully to avoid information leakage in error</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>messages.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>Traceability</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Upstream&lt;/&gt;: LLM API call (e.g., OpenAI, Azure OpenAI)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Downstream&lt;/&gt;: Consumed by SAP business logic, UI, or analytics</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>processes</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Related Data Model&lt;/&gt;: ZLLM_00_NODE, ZLLM_00_EDGE, ZLLM_00_DOC,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>etc.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>Maintenance Notes</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Update &lt;U&gt;ts_reasoning_out&lt;/&gt; and accessor logic if LLM output format</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>changes.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Review exception handling to ensure robust error propagation.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Monitor for changes in LLM API contracts.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>&lt;B&gt;In summary:&lt;/&gt;   &lt;U&gt;ZCL_LLM_00_REASONING_OUT&lt;/&gt; is a key DTO and</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>validation class for handling LLM reasoning outputs in SAP, providing</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>robust, type-safe, and business-friendly access to AI-generated</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>results, with built-in error handling and integration with the broader</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>$ZLLM_00 LLM framework.</TDLINE>
    </TLINE>
    <TLINE/>
   </LINES>
   <DESCRIPTIONS_SUB>
    <SEOSUBCOTX>
     <CMPNAME>NEW</CMPNAME>
     <SCONAME>IS_</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>ABAP Function Name</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>NEW</CMPNAME>
     <SCONAME>RO_</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Describe, and Call FM from OpenAI</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>NEW_FROM_JSON</CMPNAME>
     <SCONAME>RO_</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Describe, and Call FM from OpenAI</DESCRIPT>
    </SEOSUBCOTX>
   </DESCRIPTIONS_SUB>
  </asx:values>
 </asx:abap>
</abapGit>
