<?xml version="1.0" encoding="utf-8"?>
<abapGit version="v1.0.0" serializer="LCL_OBJECT_CLAS" serializer_version="v1.0.0">
 <asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">
  <asx:values>
   <VSEOCLASS>
    <CLSNAME>ZCL_LLM_00_EMBED_IN</CLSNAME>
    <LANGU>E</LANGU>
    <DESCRIPT>Describe, and Call FM from OpenAI</DESCRIPT>
    <STATE>1</STATE>
    <CLSCCINCL>X</CLSCCINCL>
    <FIXPT>X</FIXPT>
    <UNICODE>X</UNICODE>
    <WITH_UNIT_TESTS>X</WITH_UNIT_TESTS>
   </VSEOCLASS>
   <LINES>
    <TLINE>
     <TDFORMAT>U1</TDFORMAT>
     <TDLINE>ABAP Component Documentation: ZCL_LLM_00_EMBED_IN</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>1. Component Overview</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Type&lt;/&gt;: ABAP Class (&lt;U&gt;ZCL_LLM_00_EMBED_IN&lt;/&gt;)</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Technical Category&lt;/&gt;: Data Structure Adapter / Serialization</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>Helper for Embedding Input</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;System Role&lt;/&gt;: Part of the ZLLM_00 Lightweight LLM Module;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>supports the ingestion and serialization of embedding input data for</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>LLM (Large Language Model) operations, likely in the context of OpenAI</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>or similar AI services.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>2. Technical Analysis</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.1 Core Functionality</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_EMBED_IN&lt;/&gt; is a utility class that encapsulates the</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>input structure for embedding requests to an LLM (such as OpenAI&apos;s</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>embedding API). It provides:</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Construction from ABAP structures or JSON</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Defaulting of the model name if not provided</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Serialization to JSON for API consumption</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>This class is designed to be a lightweight, immutable data holder for</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>embedding input, ensuring that the correct structure and defaults are</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>always present when making embedding requests.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.2 Technical Architecture</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Interfaces&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZIF_LLM_00_JSON&lt;/&gt;: Provides a standard interface for JSON</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>serialization (&lt;U&gt;to_json&lt;/&gt;).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  (Commented out) &lt;U&gt;ZIF_OAI_ENDPOINT&lt;/&gt;: Not implemented here, but</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>suggests possible future extension for endpoint handling.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Dependencies&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZCL_LLM_00_JSON&lt;/&gt;: Used for JSON serialization/deserialization.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZIF_LLM_00_TYPES=&gt;TS_EMBED_IN&lt;/&gt;: Defines the structure of the</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>embedding input.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;ZCX_S&lt;/&gt;: Custom exception class for error handling.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Data Flow&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Input can be provided as an ABAP structure or as a JSON string.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  The class ensures the &lt;U&gt;model&lt;/&gt; field is set (defaults to</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;&apos;text-embedding-ada-002&apos;&lt;/&gt; if not provided).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  The internal structure can be retrieved or serialized to JSON for</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>outbound API calls.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>2.3 Implementation Details</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Construction&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;NEW&lt;/&gt;: Instantiates the class from a structure</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>(&lt;U&gt;TS_EMBED_IN&lt;/&gt;).</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;NEW_FROM_JSON&lt;/&gt;: Instantiates the class from a JSON string,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>parsing it into the structure.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Defaulting Logic&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  In the constructor, if the &lt;U&gt;model&lt;/&gt; field is initial, it is set to</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>&lt;U&gt;&apos;text-embedding-ada-002&apos;&lt;/&gt; (the default OpenAI embedding model).</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Serialization&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  Implements &lt;U&gt;to_json&lt;/&gt; via the &lt;U&gt;ZIF_LLM_00_JSON&lt;/&gt; interface,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>delegating to &lt;U&gt;ZCL_LLM_00_JSON=&gt;TO_JSON&lt;/&gt;.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Data Access&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  &lt;U&gt;GET_&lt;/&gt;: Returns the internal structure (&lt;U&gt;TS_EMBED_IN&lt;/&gt;).</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Error Handling&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  The constructor and &lt;U&gt;NEW&lt;/&gt; method can raise &lt;U&gt;ZCX_S&lt;/&gt; exceptions</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>for error scenarios.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Immutability&lt;/&gt;:</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B2</TDFORMAT>
     <TDLINE>  The class is &lt;U&gt;FINAL&lt;/&gt; and &lt;U&gt;CREATE PRIVATE&lt;/&gt;, enforcing</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>controlled instantiation and preventing subclassing.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>3. Business Context</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.1 Business Purpose</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>This class supports the integration of SAP ABAP systems with external</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>AI/LLM services (such as OpenAI) by providing a robust, consistent way</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>to prepare and serialize embedding input data. It ensures that all</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>required fields are present and correctly formatted, reducing</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>integration errors and simplifying downstream processing.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.2 Process Integration</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Used wherever embedding requests are made to an LLM service.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Likely part of a larger workflow involving document or text analysis,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>semantic search, or AI-driven business logic.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Ensures that embedding input is always valid and ready for API</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>consumption.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>3.3 Operational Impact</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Reduces the risk of malformed embedding requests.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Centralizes the logic for embedding input preparation, improving</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>maintainability and traceability.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Facilitates rapid integration with AI services by abstracting</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>serialization and defaulting logic.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>4. Support &amp;(and)&amp; Maintenance</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.1 Configuration</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  No direct configuration required.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  The default model (&lt;U&gt;&apos;text-embedding-ada-002&apos;&lt;/&gt;) is hardcoded but</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>could be parameterized in future versions.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.2 Monitoring</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  No direct monitoring points; errors in construction or serialization</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>will raise exceptions (&lt;U&gt;ZCX_S&lt;/&gt;).</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>4.3 Common Issues</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  If the input structure is incomplete or invalid, exceptions may be</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>raised.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  If the JSON input does not match the expected structure,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>deserialization will fail.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>5. Additional Information</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Author&lt;/&gt;: Not specified</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Last Updated&lt;/&gt;: Not specified</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Version&lt;/&gt;: Not specified</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U3</TDFORMAT>
     <TDLINE>Related Components and Data Model Context</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Data Model&lt;/&gt;: The class is part of the ZLLM_00 module, which uses</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>a graph-based data model for code analysis, dependency mapping, or</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>AI-driven code intelligence.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Related Classes&lt;/&gt;: Serialization helpers (&lt;U&gt;ZCL_LLM_00_JSON&lt;/&gt;),</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>embedding output classes, and LLM API wrappers.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  &lt;B&gt;Tables&lt;/&gt;: No direct database interaction, but operates in the</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>context of the ZLLM_00 analytical subsystem.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>Example Usage</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>DATA(lo_embed_in) = zcl_llm_00_embed_in=&gt;new(</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>  is_ = VALUE #( model = &apos;text-embedding-ada-002&apos; input = &apos;Some text to</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>embed&apos; )</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>).</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>/(</TDFORMAT>
     <TDLINE>DATA(json) = lo_embed_in-&gt;to_json( ).</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>Security Considerations</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  No sensitive data is handled directly, but ensure that input data</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>does not contain confidential information unless properly secured.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>B1</TDFORMAT>
     <TDLINE>  Exception handling should be monitored to avoid information leakage</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>in error messages.</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>------------------------------------------------------------------------</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE>
     <TDFORMAT>U2</TDFORMAT>
     <TDLINE>Summary</TDLINE>
    </TLINE>
    <TLINE/>
    <TLINE/>
    <TLINE>
     <TDFORMAT>*</TDFORMAT>
     <TDLINE>&lt;U&gt;ZCL_LLM_00_EMBED_IN&lt;/&gt; is a focused, robust utility class for</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>preparing and serializing embedding input data for LLM services in SAP</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>ABAP environments. It enforces structure, provides sensible defaults,</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>and integrates seamlessly with JSON-based APIs, supporting advanced</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>/</TDFORMAT>
     <TDLINE>AI-driven business scenarios.</TDLINE>
    </TLINE>
    <TLINE/>
   </LINES>
   <DESCRIPTIONS_SUB>
    <SEOSUBCOTX>
     <CMPNAME>NEW</CMPNAME>
     <SCONAME>IS_</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>ABAP Function Name</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>NEW</CMPNAME>
     <SCONAME>RO_</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Describe, and Call FM from OpenAI</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>NEW_FROM_JSON</CMPNAME>
     <SCONAME>RO_</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Describe, and Call FM from OpenAI</DESCRIPT>
    </SEOSUBCOTX>
   </DESCRIPTIONS_SUB>
  </asx:values>
 </asx:abap>
</abapGit>
